{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","value","setValue","movieCard","setMovie","found","setFound","getFilm","a","fetch","then","response","json","data","Response","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","onChange","event","target","onClick","App","state","find","film","setState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aefa9e14.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\nimport { getMovie } from '../../api/api';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [value, setValue] = useState('');\n  const [movieCard, setMovie] = useState(null);\n  const [found, setFound] = useState(false);\n\n  const addFilm = () => {\n    addMovie(movieCard);\n    setMovie(null);\n  };\n\n  const getFilm = async() => {\n    setFound(false);\n    const data = await getMovie(value);\n\n    if (data.Response === 'False') {\n      setFound(true);\n      setValue('');\n      setMovie(null);\n\n      return;\n    }\n\n    setMovie({\n      title: data.Title,\n      description: data.Plot,\n      imgUrl: data.Poster,\n      imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n      imdbId: data.imdbID,\n    });\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-danger\"\n              value={value}\n              onChange={event => setValue(event.target.value)}\n            />\n          </div>\n          {found && (\n          <p className=\"help is-danger\">\n            Can&apos;t find a movie with such a title\n          </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => getFilm()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => addFilm()}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movieCard\n      && (<MovieCard {...movieCard} />)\n      }\n\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","const API_URL = `https://www.omdbapi.com/?apikey=eb084562`;\n\nexport function getMovie(title) {\n  return fetch(`${API_URL}&t=${title}`)\n    .then(response => response.json());\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: data,\n  };\n\n  addMovie = (movie) => {\n    if (movie !== null) {\n      if (!this.state.movies.find(film => film.imdbId === movie.imdbId)) {\n        this.setState(state => ({\n          movies: [...state.movies, movie],\n        }));\n      }\n    }\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}